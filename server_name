# server_name.tfvars

server_name = "AZR1"


# main.tf

provider "azurerm" {
  # Add your Azure provider configuration here
}

# Read initial server name from the data file
locals {
  initial_server_name = file("${path.module}/server_name.tfvars")
}

# Extract the server name from the data file
data "external" "initial_server_name" {
  program = ["bash", "-c", "echo '${local.initial_server_name}' | jq -r .server_name"]
}

# Increment the server name (e.g., AZR1 to AZR2)
locals {
  next_server_number = data.external.initial_server_name.result + 1
  next_server_name   = "AZR${local.next_server_number}"
}

# Update the data file with the new server name
resource "null_resource" "update_server_name" {
  triggers = {
    server_name = local.next_server_name
  }

  provisioner "local-exec" {
    command = <<EOT
      echo "server_name = \"${local.next_server_name}\"" > server_name.tfvars
    EOT
  }
}

# Use the updated server name for creating resources
resource "azurerm_virtual_machine" "example" {
  name                  = local.next_server_name
  # Other VM configuration...
}


#extract using regular expression
locals {
  server_name_content = file("${path.module}/server_name.tfvars")
  server_name         = regex("(?<=server_name = \")(.*)(?=\")", local.server_name_content)[0]
}

output "server_name" {
  value = local.server_name
}


# 2ndoption###################################################################################

provider "azurerm" {
  # Configure Azure provider
  features = {}
}

# Read the current server number from the data file
data "local_file" "current_server_data" {
  filename = "server_number.txt"
}

# Extract the current server number
locals {
  current_server_number = regex("[0-9]+", data.local_file.current_server_data.content)[0]
}

# Increment the server number for the new deployment
locals {
  new_server_number = format("AZR%s", tonumber(local.current_server_number) + 1)
}

# Write the updated server number back to the data file
resource "null_resource" "update_server_number" {
  triggers = {
    new_server_number = local.new_server_number
  }

  provisioner "local-exec" {
    command = <<EOT
      echo "${local.new_server_number}" > server_number.txt
    EOT
  }
}

# Your Azure resource creation using the new server name
resource "azurerm_virtual_machine" "example" {
  name                  = local.new_server_number
  location              = "East US"
  resource_group_name   = "example-resource-group"
  network_interface_ids = ["<NIC_ID>"]  # Replace with actual NIC ID
  vm_size               = "Standard_DS1_v2"

  storage_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }

  storage_os_disk {
    name              = "example-os-disk"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }

  os_profile {
    computer_name  = local.new_server_number
    admin_username = "adminuser"
    admin_password = "AdminPassw0rd1234!"
  }

  os_profile_linux_config {
    disable_password_authentication = false
  }
}


###ps server name remove quote" ######

provisioner "local-exec" {
    command = <<EOT
      $newServerName = "${local.new_server_number}".Replace('"', '')
      Set-Content -Path ${var.server_name_file} -Value $newServerName
    EOT
  }


###cmd server name#####

  provisioner "local-exec" {
    command = <<EOT
      for /f "delims=" %%a in ('echo ${local.new_server_number}') do set "newServerName=%%~a"
      echo %newServerName% > ${var.server_name_file}
    EOT
  }
